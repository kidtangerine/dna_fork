<?php
/***********************************************************************/
/** 	\file	search_results_list.php

	\brief	This file represents a View layer of the BMLT MVC pattern. It
	will do a meeting search, and display the results as a paged list. It
	will present a simple table list, with each line being a meeting, and
	will provide UI for sorting the results. It is not an object-oriented
	file, and is quite simple to use. For many people, the procedural
	View Layer files may be all they need to see. The object-oriented
	stuff is encapsulated within.
	
	This is the list display for the basic HTML implementation of the BMLT.
	
	This file generates HTML structure that is modified by the presentation
	code in the search_results_list.css and search_results_list_print.css
	files.
	
	The way you use this file is to call DisplaySearchResultsList with an
	array that contains values that specify the search.

    This file is part of the Basic Meeting List Toolbox (BMLT).
    
    Find out more at: http://magshare.org/bmlt

    BMLT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMLT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this code.  If not, see <http://www.gnu.org/licenses/>.
*/

defined( 'BMLT_EXEC' ) or die ( 'Cannot Execute Directly' );	// Makes sure that this file is in the correct context.

require_once ( dirname ( __FILE__ ).'/../common_search.inc.php' );

/*******************************************************************/
/** \brief This function does a search, then builds an HTML markup
	of a tabular result, with each row being a meeting. It also allows
	sorting of the list vie 3 different axes.
	
	\returns a string, containing the HTML generated by the search.
*/
function DisplaySearchResultsList ( $in_http_vars,	/**< The various HTTP GET and POST parameters.
														 If this is defined and set to 'yes', then that means the client supports AJAX.
															- 'supports_ajax'
																We serve non-JavaScript content to clients that don't support AJAX, even if they support JavaScript.
														 		
														 This is necessary for links:
														 	- 'script_name'
														 		This is the HTTP path to the script.
														 		
														 The values that are important to the list paging are:
														 	- 'bmlt_page'
														 		This is a positive integer, specifying which page of results to display.
														 	
														 	- 'results_per_page'
														 		This is the number of meetings to list on one "page" of results.
														 		The search results are paged, so that a large search is broken
														 		into multiple pages of page_display_size results.
														 	
														 	- 'sort_key'
														 		This is the key to use for sorting. There are three possible values:
														 			- 'town'
														 				This is sorted by town, borough and neighborhood first, weekday and time second.
														 			- 'weekday'
														 				This is sorted by weekday first, town, borough and neighborhood second, then time
														 			- 'time'
														 				This is sorted by weekday first, time, second, then town, borough and neighborhood.
														 	
														 	- 'sort_dir'
														 		This is the direction of the sort. It can be one of the following:
														 			- 'asc'
														 				Ascending, from least to greatest.
														 			- 'desc'
														 				Descending, from greatest to least.
														 	
														 	These are used to specify a search:
																
															- 'services'
																This is an array of positive integers.
																This is interpreted as an array of integers. Each integer represents the ID of a Service Body.
																A positive integer means that the search will look specifically for meetings that contain that
																Service Body ID.
																If the integer is negative (preceded by a minus sign -), then the criteria will be to look
																for meetings that don't contain that ID.
																If no 'services' values are given, then the search will not use the Service Body field as a
																search criteria.
															
															- 'weekdays'
																This is an array of positive integers ( 1-7).
																This is interpreted as an array of integers. Each integer represents a weekday (1 -> Sunday, 7 -> Saturday).
																A positive integer means that the search will look specifically for meetings that occur on that weekday.
																If the integer is negative (preceded by a minus sign -), then the criteria will be to look
																for meetings that don't occur on that weekday.
																If no 'weekdays' values are given, then the search will not use the weekday field as a
																search criteria.
																
															- 'bmlt_search_type'
																This is set to 'advanced' if the search is an advanced one (we need to take more criteria into consideration).
															
															- 'advanced_search_mode'
																This is set if the call was made from the advanced search page.
																
															- 'advanced_formats'
																This is the formats array, but is only counted if the bmlt_search_type is set to 'advanced'.
															
															- 'advanced_service_bodies'
																This is the same, but for Service Bodies.
															
															- 'advanced_weekdays'
																...and weekdays.
															
															- 'advanced_published'
																This is a switch to indicate whether or not to display published or unpublished meetings.
																It is only viable for logged-in users, and can have these values:
																	- -1	Search for ONLY unpublished meetings
																	-  0	Search for published and unpublished meetings.
																	-  1	Search for ONLY published meetings.
	
															- 'formats'
																This is an array of positive integers.
																This is interpreted as an array of integers. Each integer represents a format shared ID.
																A format ID means that the search will look specifically for meetings that have that format.
																If the format is negative (preceded by a minus sign -), then the criteria will be to look
																for meetings that don't have that format.
																If no 'formats' values are given, then the search will not use the formats field as a
																search criteria.
															
															- 'langs'
																This is an array of 2-character strings.
																This is interpreted as an array of strings. Each string represents a language code, and is a 2-character string.
																A language string means that the search will look specifically for meetings that are in that language.
																If the language is preceded by a minus sign -, then the criteria will be to look
																for meetings that are not in that language.
																If no 'langs' values are given, then the search will not use the lang_enum field as a
																search criteria.
															
															The following values specify a start time "window." The meeting must start on, or after StartsAfterH/M, and
															can start no later than StartsBeforeH/M
															
															- 'StartsAfterH'
																A positive integer between 0 and 23. The hour of the minimal start time for meetings, in military time.
															- 'StartsAfterM'
																A positive integer between 0 and 59. The minute of the minimal start time for meetings, in military time.
															- 'StartsBeforeH'
																A positive integer between 0 and 23. The hour of the maximal start time for meetings, in military time.
															- 'StartsBeforeM'
																A positive integer between 0 and 59. The minute of the maximal start time for meetings, in military time.
																
															The following values specify a time duration "window." The meeting can last no longer than MaxDurationH/M,
															and no less than MinDurationH/M.
															
															- 'MinDurationH'
																A positive integer. This is the number of hours in the minimal duration.
															- 'MinDurationM'
																A positive integer. This is the number of minutes in the minimal duration.
															- 'MaxDurationH'
																A positive integer. This is the number of hours in the maximal duration.
															- 'MaxDurationM'
																A positive integer. This is the number of minutes in the maximal duration.
																
															This is how meetings are located. We don't use address lookups. Instead, we geolocate the meetings via the
															longitude and latitude fields in each record. If you don't specify a geolocation, then the entire database
															is searched. If you do specify one, then only the portion within the radius is searched.
															
															- 'geo_width'
																A floating point number. This is the radius (not diameter) of the search, in MILES (not Kilometers).
																If this is negative, then it should be an integer, and that indicates an auto-radius is requested to
																find the number of meetings in the integer.
																
															- 'geo_width_km'
																A floating point number. This is the radius (not diameter) of the search, in KILOMETERS (not Miles).
																If this is negative, then it should be an integer, and that indicates an auto-radius is requested to
																find the number of meetings in the integer.
																
															- 'long_val'
																If one of the three radius specifiers is zero or undefined, this is ignored.
																This is a floating point number that specifies the longitude, in degrees, of the center of the search radius.
																
															- 'lat_val'
																If one of the three radius specifiers is zero or undefined, this is ignored.
																This is a floating point number that specifies the latitude, in degrees, of the center of the search radius.
															
															- 'SearchString'
																A string. If this is specified, then all the string fields of the meetings specified by the above criteria
																will be searched for the string. By default, if the language supports metaphone (sound like search), then
																that is used.
																
															- 'StringSearchIsAnAddress'
																A boolean. Nonzero means that the given string should not be checked against any of the fields in the meeting
																data. Instead, it is to be considered a submission to the Google Maps geocode, and will be used to determine
																a cernter point in a local search.
																
															- 'SearchStringAll'
																If nonzero, then all of the words in the search string will have to be matched for a meetings to qualify.
																
															- 'SearchStringExact'
																If nonzero, metaphone will not be used, and the spelling must be exact.
																
															- 'meeting_ids'
																An array of positive integers. Each integer is an ID of an individual meeting. If this is set, all other
																search criteria are ignored.
															
															- 'meeting_key'
																A string. This is the xact name of the key to match. If this is null (Default), the following three are ignored.
																
															- 'meeting_key_value'
																A string. The value to match.
																
															- 'meeting_key_match_case'
																If true, the case must match. Default is false.
																
															- 'meeting_key_contains'
																If this is false, then the string must be complete. Default is true (contains).
													*/
								$in_root_offset = '/../'	/**< This is used for administration. It makes sure that the URIs to the AJAX handlers are referenced correctly.
																 I am not proud of this. It represents a design flaw. My design has a glass jaw, and can't handle the
																 context being shifted around without some handholding.
															*/
								)
{
	if ( !isset ( $in_http_vars['script_name'] ) || !$in_http_vars['script_name'] )
		{
		$script_name = preg_replace ( '|(.*?)\?.*|', "$1", $_SERVER['REQUEST_URI'] );
		}
	else
		{
		$script_name = $in_http_vars['script_name'];
		}
	
	$in_http_vars['script_name'] = preg_replace ( '#(^\/+)|(\/+$)#', '/', $in_http_vars['script_name'] );
	
	if ( !isset ( $in_http_vars['bmlt_root'] ) || !$in_http_vars['bmlt_root'] )
		{
		$in_http_vars['bmlt_root'] = 'http://'.$_SERVER['SERVER_NAME'].dirname ( $_SERVER['SCRIPT_NAME'] ).'/../';
		}
	
	require_once ( dirname ( __FILE__ ).'/../../client/c_comdef_meeting_search_manager.class.php' );
	$search_manager = new c_comdef_meeting_search_manager;

	// This can be changed in the auto config.
	$in_http_vars['bmlt_root'] = preg_replace ( '#(^\/+)|(\/+$)#', '/', $in_http_vars['bmlt_root'] );
	if ( $in_http_vars['bmlt_root'] == '/' )
		{
		$in_http_vars['bmlt_root'] = '';
		}

	$localized_strings = c_comdef_server::GetLocalStrings();
	
	$location_of_images = preg_replace ( '#(^\/+)|(\/+$)#', '/', $in_http_vars['bmlt_root']."themes/".$localized_strings['theme']."/html/images" );
	$location_of_throbber = "$location_of_images/Throbber.gif";

	if ( !isset ( $in_http_vars['page_display_size'] ) )
		{
		$in_http_vars['page_display_size'] = $localized_strings['page_display_size'];
		}
	
	if ( !isset ( $in_http_vars['results_per_page'] ) )
		{
		$in_http_vars['results_per_page'] = $localized_strings['results_per_page'];
		}
	
	if ( !isset ( $in_http_vars['sort_key'] ) )
		{
		$in_http_vars['sort_key'] = $localized_strings['default_sort_key'];
		}

	if ( !isset ( $in_http_vars['sort_dir'] ) || ( ($in_http_vars['sort_dir'] != 'desc') && ($in_http_vars['sort_dir'] != 'asc') ) )
		{
		$in_http_vars['sort_dir'] = $localized_strings['default_sort_dir'];
		}

	SetUpSearch ( $search_manager, $in_http_vars );
	
	$search_manager->SetResultsPerPage ( $in_http_vars['results_per_page'] );
	$sort_dir_desc = ($in_http_vars['sort_dir'] == "desc") ? true : false;

	$search_manager->SetSort ( $localized_strings['default_sorts'][$in_http_vars['sort_key']], $sort_dir_desc, $localized_strings['sort_depth'] );
	$search_manager->DoSearch();
	$my_radius = $search_manager->GetRadius ( $localized_strings['dist_units'] == 'mi' );

	$query = null;
	
	foreach ( $in_http_vars as $key => $value )
		{
		switch ( $key )
			{
			case	'script_name':
			case	'sort_key':
			case	'sort_dir':
			case	'bmlt_page':
			case	'gmap_key':
			case	'bmlt_root':
			case	'page_display_size':
			case	'disp_format':
			case	'advanced_formats':
			case	'geo_width':
			case	'geo_width_km':
			case	'lat_val':
			case	'long_val':
			case	'search_spec_map_center':
			case	'preset_service_bodies':
			break;
			
			default:
				if ( is_array ( $value ) )
					{
					foreach ( $value as $v )
						{
						$query .= "&amp;".htmlspecialchars ( $key )."[]=".urlencode ( $v );
						}
					}
				elseif ( $value )
					{
					$query .= "&amp;".htmlspecialchars ( $key ). "=".urlencode ( addslashes ( $value ) );
					}
				else
					{
					$query .= "&amp;".htmlspecialchars ( $key );
					}
			break;
			}
		}
	
	$ret = "";
	$long = null;
	$lat = null;
	
	if ( isset ( $in_http_vars['long_val'] ) )
		{
		$long = $in_http_vars['long_val'];
		}
	
	if ( isset ( $in_http_vars['lat_val'] ) )
		{
		$lat = $in_http_vars['lat_val'];
		}
	
	$script = null;
	
	if ( isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		// If we are able to edit meetings, then we'll put up a hidden <div>for editing.
		if ( c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user )
			{
			// This is the JavaScript for handling the dynamic and AJAX behavior.
			$pathname = dirname ( __FILE__ ).'/../../admin/admin_meeting.js';
 			$script = file_get_contents ( $pathname );
			$script = str_replace( "##DIRTY_CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['dirty_confirm'] ), $script );
			$script = str_replace( "##DELETE_CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['delete_confirm'] ), $script );
			$script = str_replace( "##REVERT_CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['change_revert_confirm'] ), $script );
			$script = str_replace( "##DUP_ACT_CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['bulk_copy_confirm'] ), $script );
			$script = str_replace( "##DEL_ACT_CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['bulk_delete_confirm'] ), $script );
			$script = str_replace( "##DEL_ACT_CONFIRM_PERM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['bulk_delete_confirm_ep'] ), $script );
			$script = str_replace( "##BAD_EMAIL_ALERT##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['email_format_bad'] ), $script );
			$script = str_replace( "##APPLY-CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_apply_confirm'] ), $script );
			$script = str_replace( "##APPLY-DELETE-CONFIRM##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_apply_confirm_delete'] ), $script );
			$script = str_replace( "##APPLY-DELETE-OOPS##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_apply_confirm_delete_oops'] ), $script );
			$script = str_replace( "##APPLY-CANCELED##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_apply_confirm_canceled'] ), $script );
			$script = str_replace( "##CHECK-ONE##", c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meetings']['no_meetings_checked_alert'] ), $script );
			$repl = htmlspecialchars ( $in_http_vars['bmlt_root'].'admin/change_meeting_ajax.php' );
			$script = str_replace( "##CHANGE_URI##", $repl, $script );
			$repl = htmlspecialchars ( $in_http_vars['bmlt_root'].'admin/delete_meeting_ajax.php' );
			$script = str_replace( "##DELETE_URI##", $repl, $script );
			$repl = htmlspecialchars ( $in_http_vars['bmlt_root'].'admin/format_sorter_ajax.php' );
			$script = str_replace( "##SORT_FORMAT_URI##", $repl, $script );
			$repl = htmlspecialchars ( $in_http_vars['bmlt_root'].'admin/bulk_handler_ajax.php' );
			$script = str_replace( "##CHECK_BULK_URI##", $repl, $script );
			$repl = htmlspecialchars ( preg_replace ( '#(^\/+)|(\/+$)#', '/', dirname( $_SERVER['SCRIPT_NAME'] ).$in_root_offset.'admin/revert_meeting_ajax.php' ) );
			$script = str_replace( "##REVERT_URI##", $repl, $script );
			$location_of_single = preg_replace ( '#(^\/+)|(\/+$)#', '/', dirname ( $_SERVER['SCRIPT_NAME'] ).$in_root_offset."admin/edit_meeting_ajax.php?supports_ajax=yes&scriptname=$script_name" );
			$script = str_replace( "##SINGLE_LOC##", $location_of_single, $script );
			$script = str_replace( '##IMAGE_DIR##', $location_of_images, $script );
			$ret .= '<script type="text/javascript">'.$script.'</script>';
			$ret .= '<div id="c_comdef_search_results_edit_hidden_div" style="display:none" class="c_comdef_search_results_edit_hidden_div no_print"></div>';
			$ret .= '<div id="geocoder_browser_edit_meeting_map_div" class="geocoder_browser_edit_meeting_hidden"><div id="goo_map_workplace_container" class="goo_map_workplace_container_div"><noscript><h1>'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['noscript_warning'] ).'</h1></noscript><div id="goo_map_workplace" class="map_work_div"><div id="meeting_map" class="map_square"></div><a href="javascript:CloseMap()">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['close_window'] ).'</a></div></div></div>';
			}
		$ret .= "<div id=\"c_comdef_search_results_single_ajax_div\" class=\"c_comdef_search_results_single_ajax_div\"></div>";
		}
	
	$ret .= "<div id=\"c_comdef_search_results_list_div\" class=\"c_comdef_search_results_div\">";
	$ret .= "<table cellspacing=\"0\" cellpadding=\"0\" class=\"comdef_list_results_container\"><tr><td>";	// This table is REQUIRED to keep the layout stable.
	
	if ( isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$ret .= "<div id=\"c_comdef_search_results_single_ajax_throbber_div\" class=\"c_comdef_search_results_single_ajax_throbber_div\" style=\"display:none\"><img id=\"c_comdef_search_results_single_ajax_throbber_img\" class=\"c_comdef_search_results_single_ajax_throbber_img\" alt=\"busy\" src=\"".c_comdef_htmlspecialchars ( $location_of_throbber )."\" /></div>";
		}
	
	if ( $search_manager instanceof c_comdef_meeting_search_manager )
		{
		$num_pages = $search_manager->GetNumberOfPages();
		$num_results = $search_manager->GetNumberOfResults();
		$page_no = 1;
		
		if ( isset ( $in_http_vars['bmlt_page'] ) && (0 < intval ( $in_http_vars['bmlt_page'] )) )
			{
			$page_no = intval ( $in_http_vars['bmlt_page'] );
			}
		
		if ( 1 > intval ( $page_no ) )
			{
			$page_no = 1;
			}
		
		if ( $page_no > $num_pages )
			{
			$page_no = $num_pages;
			}
		
		$page_data = $search_manager->GetPageOfResults ( $page_no );
		
		if ( $page_data instanceof c_comdef_meeting_search_manager )
			{
			$filter_message = '';
			
			if ( (isset ( $in_http_vars['bmlt_search_type'] ) && ($in_http_vars['bmlt_search_type'] == 'advanced')
					&& (
							(isset ( $in_http_vars['advanced_weekdays'] ) && is_array ( $in_http_vars['advanced_weekdays'] ) && count ( $in_http_vars['advanced_weekdays'] ))
						||	(isset ( $in_http_vars['advanced_service_bodies'] ) && is_array ( $in_http_vars['advanced_service_bodies'] ) && count ( $in_http_vars['advanced_service_bodies'] ))
						||	(isset ( $in_http_vars['advanced_formats'] ) && is_array ( $in_http_vars['advanced_formats'] ) && count ( $in_http_vars['advanced_formats'] ))
						))
					||	(isset ( $in_http_vars['weekdays'] ) && is_array ( $in_http_vars['weekdays'] ) && count ( $in_http_vars['weekdays'] ))
					||	(isset ( $in_http_vars['services'] ) && is_array ( $in_http_vars['services'] ) && count ( $in_http_vars['services'] ))
					||	(isset ( $in_http_vars['formats'] ) && is_array ( $in_http_vars['formats'] ) && count ( $in_http_vars['formats'] ))
					)
				{
				$filter_message = $localized_strings['comdef_search_results_strings']['Filter_String']['main_message']."\n".$localized_strings['comdef_search_results_strings']['Filter_String']['search_for']."\n";

				if ( (isset ( $in_http_vars['advanced_formats'] ) && is_array ( $in_http_vars['advanced_formats'] ) && count ( $in_http_vars['advanced_formats'] ))
					||	(isset ( $in_http_vars['formats'] ) && is_array ( $in_http_vars['formats'] ) && count ( $in_http_vars['formats'] )) )
					{
					$filter_message .= $localized_strings['comdef_search_results_strings']['Filter_String']['formats'];
					if ( is_array ( $in_http_vars['advanced_formats'] ) && (isset ( $in_http_vars['bmlt_search_type'] ) && ($in_http_vars['bmlt_search_type'] == 'advanced')) )
						{
						$format_codes = $in_http_vars['advanced_formats'];
						}
					elseif ( is_array ( $in_http_vars['formats'] ) )
						{
						$format_codes = $in_http_vars['formats'];
						}
					
					$format_strings = array();
					
					foreach ( $format_codes as $format_code )
						{
						$one_format = c_comdef_server::GetServer()->GetOneFormat ( $format_code, $localized_strings['enum'] );
						
						if ( $one_format instanceof c_comdef_format )
							{
							array_push ( $format_strings, $one_format->GetLocalName() );
							}
						}
					
					$filter_message .= join ( ',', $format_strings )."\n";
					}

				if ( (isset ( $in_http_vars['advanced_service_bodies'] ) && is_array ( $in_http_vars['advanced_service_bodies'] ) && count ( $in_http_vars['advanced_service_bodies'] ))
					||	(isset ( $in_http_vars['services'] ) && is_array ( $in_http_vars['services'] ) && count ( $in_http_vars['services'] )) )
					{
					$filter_message .= $localized_strings['comdef_search_results_strings']['Filter_String']['service_bodies'];
					if ( is_array ( $in_http_vars['advanced_service_bodies'] ) && (isset ( $in_http_vars['bmlt_search_type'] ) && ($in_http_vars['bmlt_search_type'] == 'advanced')) )
						{
						$service_codes = $in_http_vars['advanced_service_bodies'];
						}
					elseif ( is_array ( $in_http_vars['services'] ) )
						{
						$service_codes = $in_http_vars['services'];
						}
					
					$service_strings = array();
					
					foreach ( $service_codes as $service_code )
						{
						$one_sb =& c_comdef_server::GetServer()->GetServiceBodyByIDObj ( $service_code );
						
						if ( $one_sb instanceof c_comdef_service_body )
							{
							array_push ( $service_strings, $one_sb->GetLocalName() );
							}
						}
					
					$filter_message .= join ( ', ', $service_strings )."\n";
					}

				if ( (isset ( $in_http_vars['advanced_weekdays'] ) && is_array ( $in_http_vars['advanced_weekdays'] ) && count ( $in_http_vars['advanced_weekdays'] ))
					||	(isset ( $in_http_vars['weekdays'] ) && is_array ( $in_http_vars['weekdays'] ) && count ( $in_http_vars['weekdays'] )) )
					{
					$filter_message .= $localized_strings['comdef_search_results_strings']['Filter_String']['weekdays'];
					if ( is_array ( $in_http_vars['advanced_weekdays'] ) && (isset ( $in_http_vars['bmlt_search_type'] ) && ($in_http_vars['bmlt_search_type'] == 'advanced')) )
						{
						$weekday_codes = $in_http_vars['advanced_weekdays'];
						}
					elseif ( is_array ( $in_http_vars['weekdays'] ) )
						{
						$weekday_codes = $in_http_vars['weekdays'];
						}
					
					$weekday_strings = array();
					
					foreach ( $weekday_codes as $weekday_code )
						{
						array_push ( $weekday_strings, $localized_strings['weekdays'][$weekday_code-1] );
						}
					
					$filter_message .= join ( ',', $weekday_strings );
					}
				
				$filter_message = '<div class="filter_message_div_list_container"><div class="filter_message_div_list">'.str_replace ( "\n", "<br />", c_comdef_htmlspecialchars ( $filter_message ) ).'</div></div>';
				}

			$first = $page_data->GetFirstIndexInPage();
			$last = $page_data->GetLastIndexInPage();
			$loc = (isset ( $in_http_vars['StringSearchIsAnAddress'] ) && $in_http_vars['StringSearchIsAnAddress']) ? trim ( $in_http_vars['SearchString'] ) : null;
			$ret .= $filter_message;
			$ret .= DisplayResultCount ( $num_results, $first, $last, $script_name."?".preg_replace ( '/^&amp;/','',$query), $my_radius, $long, $lat, $loc );
			$ret .= DisplayResultNav ( $page_no, $in_http_vars['sort_key'], $in_http_vars['sort_dir'], $num_pages, $in_http_vars['page_display_size'], $query, $script_name, $my_radius, $long, $lat );
			$ret .= DisplayPageData ( $page_data->GetSearchResultsAsArray(), $page_data->GetSpecificSortKeys(), $page_no, $in_http_vars['sort_key'], $in_http_vars['sort_dir'], $in_http_vars, $query, $script_name, $my_radius, $long, $lat );
			$ret .= DisplayResultNav ( $page_no, $in_http_vars['sort_key'], $in_http_vars['sort_dir'], $num_pages, $in_http_vars['page_display_size'], $query, $script_name, $my_radius, $long, $lat );
			
			$pathname = dirname ( __FILE__ ).'/search_results_list.js';
 			$script .= file_get_contents ( $pathname );
			$script = preg_replace( "|\/\*.*?\*\/|s", "", $script );
			$script = preg_replace( "|[\n\r]+|s", "\n", $script );
			$script = str_replace( 'http://', '$$HREF$$', $script );
			$script = preg_replace( '#\/\/.*?[\n]#', "", $script );
			$script = str_replace( '$$HREF$$', "http://", $script );
			$script = preg_replace( "|\n+|s", " ", $script );
			$script = preg_replace( "|\t+|s", " ", $script );
			$script = preg_replace( "| +|s", " ", $script );
			if ( c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user )
				{
				$repl = $in_http_vars['bmlt_root'].'admin/edit_meeting_ajax.php';

				$script = str_replace( "##EDIT_URI##", $repl, $script );
				}
		
			if ( isset ( $in_http_vars['satellite'] ) && $in_http_vars['satellite'] )
				{
				$ajax_call = $in_http_vars['satellite'];
				$ajax_handler = '';
				if ( isset ( $in_http_vars['ajax_handler'] ) && $in_http_vars['ajax_handler'] )
					{
					$ajax_call = preg_replace ( '|^\/\/|', '/', $in_http_vars['ajax_handler'] );
					$ajax_handler = '&ajax_handler='.htmlspecialchars ( $in_http_vars['ajax_handler'] );
					}
				$pathname = "$ajax_call?redirect_ajax=contact_form.php$ajax_handler&supports_ajax=yes&contact_form&meeting_id=";
				}
			else
				{
				$pathname = $in_http_vars['bmlt_root'].'client/html/contact_form.php?contact_form&meeting_id=';
				}

			$script = str_replace( "##CONTACT_URI##", $pathname, $script );
			$script = str_replace( '##IMAGE_DIR##', $location_of_images, $script );
			$ret .= '<script type="text/javascript">'.$script.'</script>';
			}
		else
			{
			$ret .= '<div class="c_comdef_search_no_results_div">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['No_Results'] ).'</div>';
			}
		}

	$ret .= "</td></tr></table>";
	$ret .= "</div>";
	return $ret;
}

/*******************************************************************/
/** \brief This is called after the search has been executed. It
	lays out the table headers, sets up the sort links, and displays
	each meeting in its row.
	
	\returns a string, containing the HTML rendered by the function.
*/
function DisplayPageData (	&$in_ar,		///< A reference to an array of c_comdef_meeting objects to be displayed.
							$in_sort_keys,	///< An array of strings, representing the various sort keys.
							$in_page_no,	///< The page number.
							$in_sort_key,	///< The sort key used for this display.
							$in_sort_dir,	///< The sort direction used for this display.
							$in_http_vars,	///< The HTTP GET and POST arguments.
							$in_query,		///< A string. The query parameters for links.
							$in_script_name,		///< The name of the script, for links.
							$in_radius = null,		///< A floating-point number. If this is the result of a radius search, this is the radius, in Km or miles.
							$in_long = null,		///< A floating-point number. If this is the result of a radius search, this is the longitude of the center point.
							$in_lat = null			///< A floating-point number. If this is the result of a radius search, this is the latitude of the center point.
							)
{
	$ret = '';
	
	$localized_strings = c_comdef_server::GetLocalStrings();

	if ( $in_radius && ($in_radius != 0.0) )
		{
		$rd = $in_radius;

		if ( $localized_strings['dist_units'] == 'km' )
			{
		    $in_query .= '&amp;geo_width_km='.$rd;
			}
		else
		    {
		    $in_query .= '&amp;geo_width='.$rd;
		    }
		    
		$in_query .= '&amp;long_val='.$in_long;
		$in_query .= '&amp;lat_val='.$in_lat;
		$in_query .= '&amp;disp_format=force_list';
		}

	$town = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['location_municipality']);
	$name = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['meeting_name']);
	$weekday = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['weekday_tinyint']);
	$time = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['start_time']);
	$location = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['location']);
	$formats = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['formats']);

	$in_sort_dir_other = ($in_sort_dir == "asc") ? "desc" : "asc";
	
	switch ( $in_sort_key )
		{
		case	'town':
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['town'].$localized_strings['comdef_search_results_strings']['Column_Prompts']['rev'];
			$town = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=town&amp;sort_dir=$in_sort_dir_other$in_query\" title=\"$title\" class=\"c_comdef_search_results_dir_a_$in_sort_dir\">$town</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['weekday'];
			$weekday = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=weekday&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$weekday</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['time'];
			$time = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=time&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$time</a>";
		break;
		
		case	'weekday':
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['weekday'].$localized_strings['comdef_search_results_strings']['Column_Prompts']['rev'];
			$weekday = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=weekday&amp;sort_dir=$in_sort_dir_other$in_query\" title=\"$title\" class=\"c_comdef_search_results_dir_a_$in_sort_dir\">$weekday</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['town'];
			$town = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=town&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$town</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['time'];
			$time = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=time&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$time</a>";
		break;
		
		case	'time':
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['time'].$localized_strings['comdef_search_results_strings']['Column_Prompts']['rev'];
			$time = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=time&amp;sort_dir=$in_sort_dir_other$in_query\" title=\"$title\" class=\"c_comdef_search_results_dir_a_$in_sort_dir\">$time</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['weekday'];
			$weekday = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=weekday&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$weekday</a>";
			$title = $localized_strings['comdef_search_results_strings']['Column_Prompts']['town'];
			$town = "<a href=\"$in_script_name?bmlt_page=$in_page_no&amp;sort_key=town&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$town</a>";
		break;
		}
	
	// The search results are displayed in a classic table element.
	$ret .= "<table id=\"c_comdef_search_results_table_page_$in_page_no\" class=\"c_comdef_search_results_table\" cellspacing=\"0\" cellpadding=\"0\">";
	$alt = 0;	// We will alternate styles between rows.

	$ret .= "<thead>";

	$ret .= "<tr class=\"c_comdef_search_results_header_row\">";
	// Server Admins and Service Body Admins get the checkboxes next to meetings.
	if ( (c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user) && ((c_comdef_server::GetCurrentUserObj()->GetUserLevel() == _USER_LEVEL_SERVICE_BODY_ADMIN) || c_comdef_server::IsUserServerAdmin()) )
		{
		$ret .= "<td class=\"c_comdef_search_results_check_td no_print\">";
			$ret .= '<input type="checkbox" id="list_checkbox_0" value="" onclick="ToggleCheckBoxState()" />';
		$ret .= "</td>";
		}

	$ret .= "<td class=\"c_comdef_search_results_town\">$town</td>";
	$ret .= "<td class=\"c_comdef_search_results_meeting_name\">$name</td>";
	$ret .= "<td class=\"c_comdef_search_results_weekday\">$weekday</td>";
	$ret .= "<td class=\"c_comdef_search_results_time\">$time</td>";
	$ret .= "<td class=\"c_comdef_search_results_location\">$location</td>";
	$ret .= "<td class=\"c_comdef_search_results_formats\">$formats</td>";
	$ret .= "<td class=\"c_comdef_search_results_poi no_print\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Column_Headers']['gps'])."</td>";

	if ( (c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user) && ((c_comdef_server::GetCurrentUserObj()->GetUserLevel() == _USER_LEVEL_SERVICE_BODY_ADMIN) || c_comdef_server::IsUserServerAdmin()) )
		{
		$ret .= "<td class=\"c_comdef_search_results_edit_td no_print\">&nbsp;</td>";
		}
	$ret .= "</tr>";
	$ret .= "</thead>";
	$ret .= "<tbody>";
	$user_can_edit = false;	// This will be set to true if any of the listed meetings can be edited.
	foreach ( $in_ar as &$mtg_obj )
		{
		if ( $mtg_obj instanceof c_comdef_meeting )
			{
			$ret .= "<tr class=\"c_comdef_search_results_one_meeting_row ";
			// This allows us to apply alternating styles to rows.
			// Unpublished meetings get a different style. This will only be visible to logged-in admins.
			if ( (c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user) && !$mtg_obj->IsPublished() )
				{
				// Copies get yet another style.
				if ( $mtg_obj->IsCopy() )
					{
					$ret .= (($alt % 2) == 0) ? "c_comdef_search_results_copy_alt1" : "c_comdef_search_results_copy_alt2";
					}
				else
					{
					$ret .= (($alt % 2) == 0) ? "c_comdef_search_results_unpub_alt1" : "c_comdef_search_results_unpub_alt2";
					}
				}
			else
				{
				$ret .= (($alt % 2) == 0) ? "c_comdef_search_results_alt1" : "c_comdef_search_results_alt2";
				}
			
			if ( $mtg_obj->IsCopy() )
				{
				$ret .= '" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['title_checkbox_copy_meeting']);
				}
			elseif ( !$mtg_obj->IsPublished() )
				{
				$ret .= '"  title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['title_checkbox_unpub_meeting']);
				}
			
			$ret .= "\" id=\"c_comdef_search_results_one_meeting_row_".$mtg_obj->GetID()."\">";
			if ( $mtg_obj->UserCanEdit() )
				{
				$user_can_edit = true;
				}
			$ret .= DisplayMeeting ( $mtg_obj, $in_http_vars, $in_script_name );
			$ret .= "</tr>";
			$alt++;
			}
		}
	$ret .= "</tbody>";
	$ret .= "</table>";
	
	// First, there have to be some meetings in the search results that can be edited, then the user has to be allowed to edit meetings (Service Body Admin or Server Admin).
	// If so, we show the popup menu on the bottom of the search results.
	if ( $user_can_edit && (c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user) && ((c_comdef_server::GetCurrentUserObj()->GetUserLevel() == _USER_LEVEL_SERVICE_BODY_ADMIN) || c_comdef_server::IsUserServerAdmin()) )
		{
		$ret .= "<div class=\"c_comdef_search_results_list_footer no_print\">";
			$ret .= '<img style="display:none" id="bulk_submit_throbber_img" alt="ajax throbber" class="bmlt_submit_throbber_gray_img" src="placeholder" />';
			$ret .= "<div id=\"c_comdef_search_results_list_footer_inner\">";
				$ret .= '<label for="bmlt_list_search_admin_popup">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['label_text']).$localized_strings['prompt_delimiter'].'</label>';
				$ret .= '<select id="bmlt_list_search_admin_popup" onchange="if(this.value){CheckboxSelectChanged(this.value)}">';
					$ret .= '<option value="" disabled=disabled selected="selected">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['default_option']).'</option>';
					$ret .= '<option value="" disabled=disabled>&nbsp;</option>';
					$ret .= '<option value="publish">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['publish']).'</option>';
					$ret .= '<option value="unpublish">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['unpublish']).'</option>';
					$ret .= '<option value="duplicate">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['duplicate']).'</option>';
					$ret .= '<option value="delete">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['delete']).'</option>';
					if ( c_comdef_server::IsUserServerAdmin() )
						{
						$ret .= '<option value="apply_data_item">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['apply_data_item']).'</option>';
						$ret .= '<option value="delete_extreme_prejudice">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['CheckBoxes']['delete_extreme_prejudice']).'</option>';
						}
				$ret .= '</select>';
				// This div will be where the dynamic data item is applied.
				if ( c_comdef_server::IsUserServerAdmin() )
					{
					$ret .= DisplayDataEditor ( $localized_strings, $in_http_vars, $in_script_name );
					}
			$ret .= "</div>";
		$ret .= "</div>";
		}
	
	return $ret;
}

/*******************************************************************/
/** \brief This creates the HTML for the edit data item, at the bottom of a logged-in search results page.
	
	\returns a string, containing the HTML rendered by the function.
*/
function DisplayDataEditor (	$in_localized_strings,	///< The localized strings
								$in_http_vars,			///< The HTTP GET and POST arguments.
								$in_script_name			///< A string. The name of the script for the links.
							)
{
	$ret = '<div id="bmlt_list_data_item_div" style="display:none"><form method="get" onsubmit="return false" action="">';	// The enclosing div will be shown or hidden as necessary.
		$ret .= '<fieldset id="edit_data_item_fieldset" class="edit_data_item_fieldset">';
			$ret .= '<legend id="edit_data_item_legend" class="edit_data_item_legend">';
				// This is where we get a list of the available "optional" fields to put in a popup for adding a new one.
				$data_obj1 = c_comdef_meeting::GetDataTableTemplate();
				$longdata_obj = c_comdef_meeting::GetLongDataTableTemplate();
				
				// We merge the two tables (data and longdata).
				if ( is_array ( $data_obj1 ) && count ( $data_obj1 ) && is_array ( $longdata_obj ) && count ( $longdata_obj ) )
					{
					$data_obj1 = array_merge ( $data_obj1, $longdata_obj );
					}
				
				// Sort them by their field keys, so we have a consistent order.
				ksort ( $data_obj1 );
				$ret .= "<select id=\"edit_data_item_new_key\" name=\"edit_data_item_new_key\" onchange=\"document.getElementById('edit_data_item_value_textarea').select()\">";
				$first = "";
				foreach ( $data_obj1 as &$do )
					{
					$key = $do['key'];
					$prompt = $do['field_prompt'];
					$ret .= "<option value=\"".c_comdef_htmlspecialchars ( $key )."\"";
					if ( !$first )
						{
						$ret .= " selected=\"selected\"";
						$first = $prompt;
						}
					$ret .= ">".c_comdef_htmlspecialchars ( $prompt )."</option>";
					}
				$ret .= "</select>";
			$ret .= "</legend>";
			$ret .= '<div id="edit_data_item_container_div" class="edit_data_item_container_div">';
				$ret .= '<div id="edit_data_item_textarea_div" class="edit_data_item_textarea_div">';
					$ret .= '<label for="edit_data_item_value_textarea">'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_textarea_label'] ).'</label><textarea id="edit_data_item_value_textarea" class="edit_data_item_value_textarea"></textarea>';
				$ret .= '</div>';
				$ret .= '<div id="edit_data_item_override_checkbox_div" class="edit_data_item_override_checkbox_div">';
					$ret .= '<input type="checkbox" id="edit_data_item_override_checkbox" title="'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_override_checkbox_title'] ).'" />';
					$ret .= ' <label for="edit_data_item_override_checkbox" title="'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_override_checkbox_title'] ).'">'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_override_checkbox_label'] ).'</label>';
				$ret .= '</div>';
				$ret .= '<div id="edit_data_item_buttons_div" class="edit_data_item_buttons_div">';
					$ret .= '<div id="edit_data_item_cancel_button_div" class="edit_data_item_cancel_button_div">';
						$ret .= '<input type="button" id="edit_data_item_cancel_button" onclick="CancelDataItemEditor()" value="'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_cancel_button'] ).'" />';
					$ret .= '</div>';
					$ret .= '<div id="edit_data_item_apply_button_div" class="edit_data_item_apply_button_div">';
						$ret .= '<input type="button" id="edit_data_item_apply_button" onclick="ApplyDataItemEditor()" value="'.c_comdef_htmlspecialchars ( $in_localized_strings['comdef_search_admin_strings']['Edit_Meetings']['edit_data_item_value_apply_button'] ).'" />';
					$ret .= '</div>';
					$ret .= '<div class="clear_both"></div>';
				$ret .= '</div>';
			$ret .= '</div>';
		$ret .= '</fieldset>';
	$ret .= '</form></div>';
	
	return $ret;
}

/*******************************************************************/
/** \brief This arranges one table row to be displayed for one meeting.
	
	\returns a string, containing the HTML rendered by the function.
*/
function DisplayMeeting (	c_comdef_meeting &$in_mtg_obj,	///< A reference to an instance of c_comdef_meeting.
							$in_http_vars,					///< The HTTP GET and POST arguments.
							$in_script_name					///< A string. The name of the script for the links.
						)
{
	$ret = '';
	
	$localized_strings = c_comdef_server::GetLocalStrings();
	
	if ( isset ( $in_http_vars['satellite'] ) && $in_http_vars['satellite'] )
		{
		$ajax_call = $in_http_vars['satellite'];
		$ajax_handler = '';
		if ( isset ( $in_http_vars['ajax_handler'] ) && $in_http_vars['ajax_handler'] )
			{
			$ajax_call = preg_replace ( '|^\/\/|', '/', $in_http_vars['ajax_handler'] );
			$ajax_handler = '&ajax_handler='.htmlspecialchars ( $in_http_vars['ajax_handler'] );
			}
		$location_of_single = "$ajax_call?redirect_ajax=search_results_list_ajax.php$ajax_handler&supports_ajax=yes";
		}
	else
		{
		$location_of_single = $in_http_vars['bmlt_root']."client/html/search_results_list_ajax.php?supports_ajax=yes";
		}
		
	$location_of_poi = $in_http_vars['bmlt_root']."client/downloadgps.php";

	$query = null;
	$location = "";
	
	foreach ( $in_http_vars as $key => $value )
		{
		switch ( $key )
			{
			case	'script_name':	// The only one we filter for meeting lines is the script name, as that will be provided anon.
			case	'gmap_key':		// This one is very long, so we don't do it, either. It is supplied by the context.
			case	'bmlt_root':
			break;
			
			default:
				if ( is_array ( $value ) )
					{
					foreach ( $value as $v )
						{
						if ( is_array ( $v ) )
							{
							$v = join ( ',', $v );
							}
						$query .= "&amp;".htmlspecialchars ( $key )."[]=".urlencode ( $v );
						}
					}
				elseif ( $value )
					{
					$query .= "&amp;".htmlspecialchars ( $key ). "=".urlencode ( addslashes ( $value ) );
					}
				else
					{
					$query .= "&amp;".htmlspecialchars ( $key );
					}
			break;
			}
		}
	
	$id = intval ( $in_mtg_obj->GetID() );
	
	if ( isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$a_rec = "<a id=\"c_comdef_search_results_meeting_list_a_$id\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['get_details_title'] ).$in_mtg_obj->GetID()."\" class=\"c_comdef_search_results_meeting_list_a\" href=\"javascript:DisplayMeetingDetails('".intval ( $in_mtg_obj->GetID() )."','".c_comdef_htmlspecialchars ( $location_of_single )."$query')\">";
		}
	else
		{
		$a_rec = "<a id=\"c_comdef_search_results_meeting_list_a_$id\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['get_details_title'] ).$in_mtg_obj->GetID()."\" class=\"c_comdef_search_results_meeting_list_a\" href=\"$in_script_name?single_meeting_id=".intval ( $in_mtg_obj->GetID() )."$query\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['meeting_link'] )."\">";
		}
	
	if ( (c_comdef_server::GetCurrentUserObj() instanceof c_comdef_user) && ((c_comdef_server::GetCurrentUserObj()->GetUserLevel() == _USER_LEVEL_SERVICE_BODY_ADMIN) || c_comdef_server::IsUserServerAdmin()) )
		{
		$ret = "<td class=\"c_comdef_search_results_check no_print\" id=\"c_comdef_search_results_check_$id\">";
		if ( $in_mtg_obj->UserCanEdit() )
			{
			$ret .= '<input type="checkbox" id="list_checkbox_'.intval ( $in_mtg_obj->GetID() ).'" value="'.intval ( $in_mtg_obj->GetID() ).'" />';
			}
		else
			{
			$ret .= "&nbsp;";
			}
		$ret .= "</td>";
		}
	
	$ret .= "<td class=\"c_comdef_search_results_town\" id=\"c_comdef_search_results_town_$id\">";
	$ret .= BuildTown ( $in_mtg_obj );
	$ret .= "</td>";
	
	$name = c_comdef_htmlspecialchars ( trim ( stripslashes ( $in_mtg_obj->GetMeetingDataValue('meeting_name') ) ) );
	
	$ret .= "<td class=\"c_comdef_search_results_meeting_name\" id=\"c_comdef_search_results_name_$id\">";
	if ( $name )
		{
		$ret .= "$a_rec$name</a>";
		}
	else
		{
		$ret .= "&nbsp;";
		}
	$ret .= "</td>";
	
	$ret .= "<td class=\"c_comdef_search_results_weekday\" id=\"c_comdef_search_results_weekday_$id\">";
	$ret .= $localized_strings['weekdays'][$in_mtg_obj->GetMeetingDataValue('weekday_tinyint') -1];
	$ret .= "</td>";
	
	$ret .= "<td class=\"c_comdef_search_results_time\" id=\"c_comdef_search_results_time_$id\">";
	$ret .= BuildTime ( $in_mtg_obj->GetMeetingDataValue('start_time') );
	$ret .= "</td>";
	
	$ret .= "<td class=\"c_comdef_search_results_location\" id=\"c_comdef_search_results_location_$id\">";
	
	$loc = $in_mtg_obj->GetMeetingAddressString ( true );
	
	if ( !$loc )
		{
		$loc = '&nbsp;';
		}
	
	if ( !$name )
		{
		$ret .= $a_rec.$loc.'</a>';
		}
	else
		{
		$ret .= $loc;
		}
	
	$ret .= "</td>";
	
	$ret .= "<td class=\"c_comdef_search_results_formats\" id=\"c_comdef_search_results_formats_$id\">";
	$ret .= BuildFormats ( $in_mtg_obj );
	
	$ret .= "</td>";
	
	$ret .= "<td class=\"c_comdef_search_results_poi no_print\">";
	$ret .= '<a class="c_comdef_search_results_poi_a" href="';
	$ret .= $location_of_poi.'?lat='.floatval ( $in_mtg_obj->GetMeetingDataValue('latitude') );
	$ret .= '&amp;lng='.floatval ( $in_mtg_obj->GetMeetingDataValue('longitude') );
	
	$ret .= '&amp;name=';
	
	if ( $name )
		{
		$ret .= urlencode ( $name );
		}
	else
		{
		$ret .= urlencode ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['generic'] );
		}
		
	$keys = array ('location_nation','location_province','location_sub_province','location_municipality','location_city_subsection','location_neighborhood','location_street','location_info','location_postal_code_1','location_postal_code_2','location_text');

	foreach ( $keys as $key )
		{
		$value =& $in_mtg_obj->GetMeetingDataValue($key);
		if ( isset ( $value ) )
			{
			$location[$key] = $value;
			}
		}

	// We build up a one-line location, which includes all the address information.
	$location_text = "";
	
	if ( isset ( $location['location_text'] ) )
		{
		$location_text .= urlencode ( $location['location_text'] );
		}
	
	if ( isset ( $location['location_street'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%2C%20";
			}
		$location_text .= urlencode ( $location['location_street'] );
		}
	
	if ( isset ( $location['location_info'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%20";
			}
		$location_text .= "(".urlencode ( $location['location_info'] ).")";
		}
	
	if ( isset ( $location['location_municipality'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%2C%20";
			}
		// This will be used for the map display.
		$location_text .= urlencode ( $location['location_municipality'] );
		}
	
	if ( isset ( $location['location_city_subsection'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%2C%20";
			}
		// If we have a borough, then we'd rather have that mentioned (more local significance).
		$location_text .= urlencode ( $location['location_city_subsection'] );
		}
	
	if ( isset ( $location['location_neighborhood'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%20";
			}
		// If we have a neighborhood, then we'd rather have that mentioned (more local significance).
		$location_text .= "(".urlencode ( $location['location_neighborhood'] ).")";
		}
	
	if ( isset ( $location['location_province'] ) )
		{
		if ( $location_text )
			{
			$location_text .= "%2C%20";
			}
		$location_text .= urlencode ( $location['location_province'] );
		}
	
	if ( isset ( $location['location_postal_code_1'] ) && $location['location_postal_code_1'] )
		{
		if ( $location_text )
			{
			$location_text .= "%20";
			}
		$location_text .= urlencode ( $location['location_postal_code_1'] );
		}
	
	if ( $location_text )
		{
		$ret .= '&amp;desc='.$location_text;
		}
	
	$ret .=  '" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['POI_Link_Title'] ).'"><span style="display:none">GPS Download for Meeting ID '.$id.'</span></a>';
	$ret .= "</td>";

	if ( null != c_comdef_server::GetCurrentUserObj() )
		{
		$ret .= "<td class=\"c_comdef_search_results_edit_td no_print\">";
		if ( $in_mtg_obj->UserCanEdit() )
			{
			$ret .= '<a href="javascript:EditMeetingLink(\''.intval ( $in_mtg_obj->GetID() ).'\')" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['edit_meeting'] ).$in_mtg_obj->GetID().'">';
			$ret .= c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['edit_indicator'] )."</a>";
			}
		else
			{
			$ret .= "&nbsp;";
			}
		$ret .= "</td>";
		}

	return $ret."\n";
}

/*******************************************************************/
/** \brief This Builds a brief display over the table, indicating 
	which meeting records are being covered by the current page.
	
	\returns a string, containing the HTML rendered by the function.
*/
function DisplayResultCount (	$in_num_results,	///< An integer. The number of meetings total in the search.
								$in_first,			///< An integer. The index of the first meeting displayed (1-based)
								$in_last,			///< An integer. The index of the last meeting displayed.
								$in_script_name,	///< The script name for the link.
								$in_radius = null,	///< A floating-point number. If this is the result of a radius search, this is the radius, in Km or miles.
								$in_long = null,	///< A floating-point number. If this is the result of a radius search, this is the longitude of the center point.
								$in_lat = null,		///< A floating-point number. If this is the result of a radius search, this is the latitude of the center point.
								$in_loc = null		///< A string. If a string search was used for the location, the location string is given here.
							)
{
	$localized_strings = c_comdef_server::GetLocalStrings();

	$ret = "<div class=\"comdef_style_result_count_header\">$in_first ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Count_Tally']['to'] )." $in_last ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Count_Tally']['of'] )." $in_num_results ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Count_Tally']['suffix'] );
	
	if ( $in_radius && ($in_radius != 0.0) )
		{
		$rd = $in_radius;

		if ( $localized_strings['dist_units'] == 'km' )
			{
		    $in_script_name .= '&amp;geo_width_km='.$rd.'&amp;';
			}
		else
		    {
		    $in_script_name .= '&amp;geo_width='.$rd.'&amp;';
		    }
		
		$in_script_name .= '&amp;long_val='.$in_long;
		$in_script_name .= '&amp;lat_val='.$in_lat;
		$in_script_name .= '&amp;disp_format=map';
		$a_rec = '';
		$a_rec_close = '';
		if ( preg_match ( "|supports_ajax=yes|", $in_script_name ) )
			{
			$a_rec = '<a class="c_comdef_map_link_header_a" href="'.$in_script_name.'" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Map_Link_Title'] ).'">';
			
			if ( $in_loc )
				{
				$a_rec_close .= " ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Map_Link_of'] ).$in_loc;
				}
				
			$a_rec_close .= "</a>";
			}
		$ret .= $a_rec.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Radius_Display']['within'] );
		$in_radius = round ( $in_radius, 2 );
		$ret .= $in_radius;
		// Only one of these should be specified
		$ret .= $localized_strings['dist_units'] == 'mi' ?
			c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Radius_Display']['miles'] )
			: c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Radius_Display']['km'] );
		$ret .= $a_rec_close;
		}
	
	$ret .= "</div>";
	
	return $ret;
}

/*******************************************************************/
/** \brief This creates the numbered page navigation bar.
	
	\returns a string, containing the HTML rendered by the function.
*/
function DisplayResultNav (	$in_page_no,			///< The page selected.
							$in_sort_key,			///< The sort key used for this display.
							$in_sort_dir,			///< The sort direction used for this display.
							$in_num_pages,			///< The number of pages in this search result.
							$in_page_display_size,	///< The number of page links to be shown before paging arrows are displayed.
							$in_query,				///< A string. The query parameters for links.
							$in_script_name,		///< The name of the script, for links.
							$in_radius = null,		///< A floating-point number. If this is the result of a radius search, this is the radius, in Km or miles.
							$in_long = null,		///< A floating-point number. If this is the result of a radius search, this is the longitude of the center point.
							$in_lat = null			///< A floating-point number. If this is the result of a radius search, this is the latitude of the center point.
							)
{
	$localized_strings = c_comdef_server::GetLocalStrings();

	if ( $in_radius && ($in_radius != 0.0) )
		{
		$rd = $in_radius;
            
		if ( $localized_strings['dist_units'] == 'km' )
			{
		    $in_query .= '&amp;geo_width_km='.$rd;
			}
		else
		    {
		    $in_query .= '&amp;geo_width='.$rd;
		    }

		$in_query .= '&amp;long_val='.$in_long;
		$in_query .= '&amp;lat_val='.$in_lat;
		$in_query .= '&amp;disp_format=force_list';
		}
	
	$ret = "<div class=\"comdef_style_result_nav_header no_print\">";
	if ( 1 != $in_page_no )
		{
		$title = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['page_link_prompt'] )." 1.";
		$ret .= "<span class=\"c_comdef_meeting_search_unselected_page\" title=\"$title\"><a href=\"$in_script_name?sort_key=$in_sort_key&amp;sort_dir=$in_sort_dir$in_query\">1</a></span>";
		}
	else
		{
		$ret .= "<span class=\"c_comdef_meeting_search_selected_page\">1</span>";
		}
	
	if ( $in_num_pages > 1 )
		{
		$min = 2;
		$max = $in_num_pages - 1;
		if ( $in_num_pages > $in_page_display_size )
			{
			$div_2 = intval ( ($in_page_display_size -2) / 2 );
			
			$d_below = $div_2;
			$d_above = $div_2;
			
			$above = ($in_num_pages - $in_page_no) - 1;
			$below = $in_page_no - 2;
			
			if ( $above <= $div_2 )
				{
				$d_below += ($div_2 - $above);
				}
			
			if ( $below <= $div_2 )
				{
				$d_above += ($div_2 - $below);
				}
			
			if ( $above > $d_above )
				{
				$max = $in_page_no + $d_above;
				}
			
			if ( $below > $d_below )
				{
				$min = $in_page_no - $d_below;
				}
			}
		
		if ( $min > 2 )
			{
			$ret .= "<span class=\"c_comdef_meeting_search_unselected_page page_spinner_down\">";
			$pdown = $in_page_no - ($in_page_display_size - 2);
			if ( $pdown < 1 )
				{
				$pdown = 1;
				}
			$title = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['page_down_prompt'] );
			$ret .= "<a href=\"$in_script_name?bmlt_page=$pdown&amp;sort_key=$in_sort_key&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">".c_comdef_htmlspecialchars( $localized_strings['comdef_search_results_strings']['page_down_char'] )."</a>";
			$ret .= "</span>";
			}
			
		for ( $i = $min; $i <= $max; $i++ )
			{
			if ( $i != $in_page_no )
				{
				$title = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['page_link_prompt'] )." $i.";
				$ret .= "<span class=\"c_comdef_meeting_search_unselected_page\" title=\"$title\"><a href=\"$in_script_name?bmlt_page=$i&amp;sort_key=$in_sort_key&amp;sort_dir=$in_sort_dir$in_query\">$i</a></span>";
				}
			else
				{
				$ret .= "<span class=\"c_comdef_meeting_search_selected_page\">$i</span>";
				}
			}
		
		if ( $max < ($in_num_pages - 1) )
			{
			$ret .= "<span class=\"c_comdef_meeting_search_unselected_page page_spinner_up\">";
			$pup = $in_page_no + ($in_page_display_size - 2);
			if ( $pup > $in_num_pages )
				{
				$pup = $in_num_pages;
				}
			$title = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['page_up_prompt'] );
			$ret .= "<a href=\"$in_script_name?bmlt_page=$pup&amp;sort_key=$in_sort_key&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">".c_comdef_htmlspecialchars( $localized_strings['comdef_search_results_strings']['page_up_char'] )."</a>";
			$ret .= "</span>";
			}

		if ( $in_num_pages != $in_page_no )
			{
			$title = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['page_link_prompt'] )." $in_num_pages.";
			$ret .= "<span class=\"c_comdef_meeting_search_unselected_page\"><a href=\"$in_script_name?bmlt_page=$in_num_pages&amp;sort_key=$in_sort_key&amp;sort_dir=$in_sort_dir$in_query\" title=\"$title\">$in_num_pages</a></span>";
			}
		else
			{
			$ret .= "<span class=\"c_comdef_meeting_search_selected_page\">$in_num_pages</span>";
			}
		}
	
	$ret .= "</div>";
	
	return $ret;
}
?>