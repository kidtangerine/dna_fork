<?php
/***********************************************************************/
/** 	\file	search_results_single_meeting.php

	\brief	This file represents a View layer of the BMLT MVC pattern.
	It will display a single meeting, as specified by the ID passed in.

    This file is part of the Basic Meeting List Toolbox (BMLT).
    
    Find out more at: http://magshare.org/bmlt

    BMLT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BMLT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this code.  If not, see <http://www.gnu.org/licenses/>.
*/

defined( 'BMLT_EXEC' ) or die ( 'Cannot Execute Directly' );	// Makes sure that this file is in the correct context.

/*******************************************************************/
/** \brief Return the HTML for one single meeting's detail display.
	
	\returns a string, containing the HTML generated by the search.
*/
function DisplayOneMeeting ( &$in_http_vars	/**< The various HTTP GET and POST parameters. This is passed by reference
												 If this is defined and set to 'yes', then that means the client supports AJAX.
													- 'supports_ajax'
														We serve non-JavaScript content to clients that don't support AJAX, even if they support JavaScript.
														
												 This is necessary for links:
													- 'script_name'
														This is the HTTP path to the script.
														
												 The values that are important to the listing are:
													- 'single_meeting_id'
														This is a single positive integer that is the ID of the meeting that is to be listed.
													- 'no_close'
														This is set to true if the close boxes should not be displayed (single meeting only on one page).
														
												 This function will add two parameters to the input array:
												 	- 'out_longitude'
												 		The longitude of the meeting.
												 	- 'out_latitude'
												 		The latitude of the meeting.
											*/
							)
{
	if ( !$in_http_vars['script_name'] )
		{
		$script_name = preg_replace ( '|(.*?)\?.*|', "$1", $_SERVER['REQUEST_URI'] );
		}
	else
		{
		$script_name = $in_http_vars['script_name'];
		}
	
	if ( !isset ( $in_http_vars['supports_ajax'] ) || ($in_http_vars['supports_ajax'] != 'yes') )
		{
		$in_http_vars['no_close'] = true;
		}
	
	if ( !isset ( $in_http_vars['bmlt_root'] ) || !$in_http_vars['bmlt_root'] )
		{
		$in_http_vars['bmlt_root'] = 'http://'.$_SERVER['SERVER_NAME'].dirname ( $_SERVER['PHP_SELF'] ).'/../../';
		}
	
	$location_of_poi = $in_http_vars['bmlt_root']."client/downloadgps.php";

	require_once ( dirname ( __FILE__ ).'/../../client/c_comdef_meeting_search_manager.class.php' );
	$search_manager = new c_comdef_meeting_search_manager;

	$localized_strings = c_comdef_server::GetLocalStrings();

	$query = null;
	
	foreach ( $in_http_vars as $key => $value )
		{
		switch ( $key )
			{
			case	'script_name':
			case	'single_meeting_id':
			break;
			
			default:
				if ( is_array ( $value ) )
					{
					foreach ( $value as $v )
						{
						$query .= "&amp;".htmlspecialchars ( $key )."[]=".urlencode ( $v );
						}
					}
				elseif ( $value )
					{
					$query .= "&amp;".htmlspecialchars ( $key ). "=".urlencode ( $value );
					}
				else
					{
					$query .= "&amp;".htmlspecialchars ( $key );
					}
			break;
			}
		}
	
	$meeting_obj = $search_manager->GetSingleMeetingByID ( $in_http_vars['single_meeting_id'] );
	
	$ret = "<div class=\"c_comdef_search_results_single_div\">";
	if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close'] ) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$ret .= "<div class=\"c_comdef_search_results_single_close_box_div no_print\"><a href=\"javascript:HideMeetingDetails()\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['close_title'] )."\">X</a></div>";
		}

	if ( $meeting_obj instanceof c_comdef_meeting )
		{
		$keys = $meeting_obj->GetMeetingDataKeys();
		
		$single_meeting_query = '';
		$long_lat = "";
		$name = "";
		$ret_temp = "";
		$starts = "";
		$durationH = "";
		$durationM = "";
		$weekday = "";
		$location = "";
		$service_body = "";
		$service_body_type = "";
		$service_body_name = "";
		$lang = "";
		
		$meeting_data_object_array =& $meeting_obj->GetMeetingData();
		
		// We go through all the various meeting data fields, and pick out and format values and prompts for display.
		foreach ( $keys as $key )
			{
			$value =& $meeting_obj->GetMeetingDataValue($key);
			
			if ( isset ( $value ) )
				{
				$prompt = $meeting_obj->GetMeetingDataPrompt($key);
				
				switch ( $key )
					{
					// These are meta fields that we don't need to display.
					case	'id_bigint':	// We ignore the ID (We already have that)
					break;
					
					case	'email_contact':	// We ignore the Email Contact
					break;
					
					case	'distance_in_km':		// We don't display these, either.
					case	'distance_in_miles':
					break;
					
					case	'published':
						if ( !$meeting_obj->Ispublished() )
							{
							$ret_temp .= "<div class=\"c_comdef_search_results_unpub_line\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['unpublished_string'] )."</div>";
							}
					break;
					
					case	'copy':
						$ret_temp .= "<div class=\"c_comdef_search_results_duplicate_line\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_admin_strings']['Edit_Meeting']['duplicate_string'] )."</div>";
					break;
					
					case	'service_body_bigint':	// We get the name and type for the meeting's Service Body.
						$sb =& c_comdef_server::GetServiceBodyByIDObj ( $value );
						if ( $sb instanceof c_comdef_service_body )
							{
							$service_body_name = c_comdef_htmlspecialchars ( $sb->GetLocalName() );
							$service_body_uri = $sb->GetURI();
							$type = $sb->GetSBType();

							if ( !$type )
								{
								$type = "generic";
								}

							$service_body_type = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Service_Body_Types'][$type] );
							}
					break;
					
					case	'lang_enum':	// We spell out the language.
						$lang = c_comdef_server::GetServerLangs();
						$lang = c_comdef_htmlspecialchars ( $lang[$value] );
					break;
					
					// The location is going to be a composite string, made from these, so we stuff them into an array for later use.
					case	'location_nation':
					case	'location_province':
					case	'location_sub_province':
					case	'location_municipality':
					case	'location_city_subsection':
					case	'location_neighborhood':
					case	'location_street':
					case	'location_info':
					case	'location_postal_code_1':
					case	'location_postal_code_2':
					case	'location_text':
						$location[$key] = c_comdef_htmlspecialchars ( $value );
					break;
					
					case	'meeting_name':	// We will display the name first.
						$name = c_comdef_htmlspecialchars ( $value );
					break;
					
					case	'start_time':	// We will format the start time.
						$value = explode ( ":", $value );
						$starts = mktime ( $value[0], $value[1] );
					break;
					
					case	'duration_time':	// We will format the duration.
						list ( $durationH, $durationM ) = explode ( ":", $value );
						
						$durationH = intval ( $durationH );
						$durationM = intval ( $durationM );
					break;
					
					case	'formats':	// Formats get displayed differently.
						if ( is_array ( $value ) && count ( $value ) )
							{
							foreach ( $value as $format_obj )
								{
								if ( $format_obj instanceof c_comdef_format )
									{
									if ( !isset ( $formats ) || !$formats )
										{
										$formats = "<div class=\"c_comdef_search_results_formats_div";
										if ( isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close']  )
											{
											$formats .= ' c_comdef_search_results_formats_div_no_spec';
											}
										$formats .= "\"><div class=\"label_div\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['formats'] ).$localized_strings['prompt_delimiter']."</div>";
										$formats .= "<dl class=\"c_comdef_search_results_formats_dl\">";
										}
									
									$key = c_comdef_htmlspecialchars ( trim ( stripslashes ( $format_obj->GetKey() ) ) );
									$name = c_comdef_htmlspecialchars ( trim ( stripslashes ( $format_obj->GetLocalName() ) ) );
									$desc = c_comdef_htmlspecialchars ( trim ( stripslashes ( $format_obj->GetLocalDescription() ) ) );
									
									$formats .= "<dt class=\"format_term_dt\"><span class=\"format_key_span\">($key)</span><span class=\"format_name_span\">$name</span></dt>";
									$formats .= "<dd class=\"format_desc_dd\"><span class=\"format_desc_span\">$desc</span></dd>";
									}
								}
							
							if ( isset ( $formats ) && $formats )
								{
								$formats .= "</dl>"; 
								$formats .= "</div>"; 
								}
							}
					break;
					
					case	'weekday_tinyint':	// We'll spell out the weekday.
						$weekday = c_comdef_htmlspecialchars ( $localized_strings['weekdays'][$value-1] );
					break;
					
					case	'worldid_mixed':	// We'll spell out the weekday.
						$value = intval ( preg_replace ( '|\D*?|', '', $value ) );
						if ( intval ( $value ) > 0 )	// For now, we are using integers.
							{
							$value = sprintf ( 'G%08d', $value );
							
							if ( isset ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['worldid_mixed'] ) )
								{
								$prompt = $localized_strings['comdef_search_results_strings']['Value_Prompts']['worldid_mixed'];
								}
							
							$ret_temp .= "<div class=\"c_comdef_search_results_single_value_div\"><span class=\"value_prompt\">".c_comdef_htmlspecialchars ( $prompt ).$localized_strings['prompt_delimiter']."</span> <span class=\"value_value\">".c_comdef_htmlspecialchars ( $value )."</span></div>";
							}
					break;
					
					// We will make a link for a map from this.
					case	'longitude':
					case	'latitude':
						$long_lat[$key] = $value;
					break;
					
					default:	// Otherwise, it is one of the "generic" fields (like Comments). We get the prompt and value for display.
						if ( isset ( $localized_strings['comdef_search_results_strings']['Value_Prompts'][$prompt] ) )
							{
							$prompt = $localized_strings['comdef_search_results_strings']['Value_Prompts'][$prompt];
							}

						// Admin-only visibile items are only shown to logged-in admins.
						if ( intval ( $meeting_data_object_array[$key]['visibility'] ) != _VISIBILITY_NONE_ )
							{
							if ( is_array ( $value ) )
								{
								// If the value is an array, we can't display it right now.
								}
							elseif ( isset ( $value ) )
								{
								$ret_temp .= '<div class="c_comdef_search_results_single_value_div';
								
								if ( (intval ( $meeting_data_object_array[$key]['visibility'] ) == _VISIBILITY_WEB_MOB_) )
									{
									$ret_temp .= ' no_print';
									}
								elseif ( (intval ( $meeting_data_object_array[$key]['visibility'] ) == _VISIBILITY_WEB_) )
									{
									$ret_temp .= ' visibility_web_only';
									}
								elseif ( (intval ( $meeting_data_object_array[$key]['visibility'] ) == _VISIBILITY_MOB_) )
									{
									$ret_temp .= ' visibility_mob_only';
									}
								// We allow print-only fields to be displayed to logged-in admins.
								elseif ( (intval ( $meeting_data_object_array[$key]['visibility'] ) == _VISIBILITY_PRINT_) && !((c_comdef_server::GetCurrentUserObj(true) instanceof c_comdef_user) && c_comdef_server::GetCurrentUserObj(true)->IsEnabled()) )
									{
									$ret_temp .= ' print_only';
									}
								
								$ret_temp .= '"><span class="value_prompt">'.c_comdef_htmlspecialchars ( $prompt ).$localized_strings['prompt_delimiter']."</span> <span class=\"value_value\">".ExtractURIs ( trim ( stripslashes ( $value ) ), $localized_strings['comdef_search_results_strings']['url_title'] )."</span></div>";
								}
							}
						// Invisible items will only be shown to folks allowed to see them.
						elseif ( (intval ( $meeting_data_object_array[$key]['visibility'] ) == _VISIBILITY_NONE_) && $meeting_obj->UserCanObserve() )
							{
							$ret_temp .= '<div class="c_comdef_search_results_single_value_div visibility_none">';
							$ret_temp .= '<span class="value_prompt">'.c_comdef_htmlspecialchars ( $prompt ).$localized_strings['prompt_delimiter']."</span> <span class=\"value_value\">".ExtractURIs ( trim ( stripslashes ( $value ) ), $localized_strings['comdef_search_results_strings']['url_title'] )."</span></div>";
							}
					break;
					}
				}
			}
		
		$ret .= "<div class=\"c_comdef_search_results_single_header_div\">";
		
		// If there is no meeting name, then we use the generic "NA Meeting" filler.
		if ( !$meeting_obj->GetMeetingDataValue('meeting_name') )
			{
			$name = c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['generic'] );
			}
		
		// We spell out Noon and Midnight.
		if ( ($starts == "00:00:00") || ($starts == "23:59:00") )
			{
			$starts = $localized_strings['comdef_search_results_strings']['midnight'];
			}
		elseif ($starts == "12:00:00")
			{
			$starts = $localized_strings['comdef_search_results_strings']['noon'];
			}
		else
			{
			$starts = c_comdef_htmlspecialchars ( date ( $localized_strings['time_format'], $starts) );
			}
		
		$ret .= "<h1>";
		// If the meeting is in an AJAX display, give a link to the single meeting.
		if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close']) )
			{
			$query = null;
			
			foreach ( $in_http_vars as $key => $value )
				{
				switch ( $key )
					{
					case	'advanced_published':
					case	'script_name':
					case	'disp_format':
					case	'geo_width':
					case	'geo_width_km':
					case	'lat_val':
					case	'long_val':
					case	'zoom':
					case	'switcher':
					case	'supports_ajax':
					case	'search_form':
					case	'single_meeting_id':
					case	'redirect_ajax':
					case	'ajax_handler':
					case	'search_spec_map_center':
					case	'satellite':
					case	'satellite_standalone':
					case	'gmap_key':
					case	'start_view':
					case	'bmlt_root':
					case	'do_search':
					case	'lang_enum':
					case	'no_ajax_check':
					case	'start_view':
					case	'page_display_size':
					case	'results_per_page':
					case	'sort_key':
					case	'sort_dir':
					case	'SearchString':
					case	'SearchStringAll':
					case	'bmlt_search_type':
					case	'preset_service_bodies':
					case	'advanced_search_mode':
					case	'advanced_mapmode':
					case	'advanced_radius':
					case	'advanced_weekdays':
					case	'result_type_advanced':
					case	'weekdays':
					case	'aggregate_sb_checks':
					case	'advanced_service_bodies':
					case	'services':
					case	'bmlt_page':
					case	'logout':
					
					break;
					
					default:
						if ( is_array ( $value ) )
							{
							foreach ( $value as $v )
								{
								$query .= "&amp;".htmlspecialchars ( $key )."[]=".urlencode ( $v );
								}
							}
						elseif ( $value )
							{
							$query .= "&amp;".htmlspecialchars ( $key ). "=".urlencode ( $value );
							}
						else
							{
							$query .= "&amp;".htmlspecialchars ( $key );
							}
					break;
					}
				}
			
			if ( $query )
				{
				$query = preg_replace ( '|^\&amp;|', '?', $query ).'&amp;';
				}
			else
				{
				$query = '?';
				}
			
			$single_meeting_query = $query."single_meeting_id=".$meeting_obj->GetID();

			$ret .= "<a id=\"bmlt_main_meeting_link\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Main_Link_Title'] )."\" class=\"single_header_link\" href=\"$single_meeting_query\">";
			}
		
		$ret .= $name;
		
		if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close']) )
			{
			$ret .= "</a>";
			}
		
		$ret .= "</h1>";
		$ret .= "<h2>".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['weekday'] )." $weekday</h2>";
		$ret .= "<h3>".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['start_time'] )." $starts</h3>";
		
		if ( (isset ( $durationH  ) && $durationH)  || (isset ( $durationM  ) && $durationM) )
			{
			$ret .= "<h4>".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['duration_time'] )." ".c_comdef_htmlspecialchars ( $durationH );
			}
		
		if ( $durationH > 0 )
			{
			if ( $durationH == 1 )
				{
				$ret .= " ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['duration_time_hour'] );
				}
			else
				{
				$ret .= " ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['duration_time_hours'] );
				}
			}
		
		if ( $durationM > 0 )
			{
			if ( $durationH > 0 )
				{
				$ret .= " ";
				}
		
			$ret .= c_comdef_htmlspecialchars ( $durationM );
			
			if ( $durationM == 1 )
				{
				$ret .= " ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['duration_time_minute'] );
				}
			else
				{
				$ret .= " ".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['duration_time_minutes'] );
				}
			}
		
		$ret .= "</h4>";

		$ret .= "</div>";
		$ret .= "<div class=\"c_comdef_single_container\">";
		
		// We build up a one-line location, which includes all the address information.
		$location_blurb = "";
		
		if ( isset ( $location['location_municipality'] ) )
			{
			// This will be used for the map display.
			$location_blurb = c_comdef_htmlspecialchars ( htmlspecialchars_decode ( trim ( stripslashes ( $location['location_municipality'] ) ) ) );
			}
		
		if ( isset ( $location['location_city_subsection'] ) )
			{
			$location_blurb = c_comdef_htmlspecialchars ( htmlspecialchars_decode ( trim ( stripslashes ( $location['location_city_subsection'] ) ) ) );
			}
		
		if ( isset ( $location['location_neighborhood'] ) )
			{
			// If we have a neighborhood, then we'd rather have that mentioned (more local significance).
			$location_blurb = c_comdef_htmlspecialchars ( htmlspecialchars_decode ( trim ( stripslashes ( $location['location_neighborhood'] ) ) ) );
			}
		
		$location_text = c_comdef_htmlspecialchars ( $meeting_obj->GetMeetingAddressString (  ) );
	
		// We need to do this, because Google Maps doesn't like the ampersand character or parentheses.
		$name = urlencode ( preg_replace ( '|[\(\%28\)\%29]|', '-', htmlspecialchars_decode ( $name ) ));
		$location_blurb = urlencode ( preg_replace ( '|[\(\%28\)\%29]|', '-', htmlspecialchars_decode ( $location_blurb ) ));

		$name .= ",+".urlencode ( $starts ).",+".urlencode ( $weekday ).",+$location_blurb";
		$map_url = str_replace ( "##LONG##", c_comdef_htmlspecialchars ( $long_lat['longitude'] ), str_replace ( "##LAT##", c_comdef_htmlspecialchars ( $long_lat['latitude'] ), str_replace ( "##NAME##", $name, $localized_strings['comdef_search_results_strings']['MapsURL'] ) ) );
		
		// We add this if the client doesn't support AJAX. It causes Google Maps to send you to a plain (boring) HTML version of the map.
		if ( !isset ( $in_http_vars['supports_ajax'] ) || ($in_http_vars['supports_ajax'] != 'yes') )
			{
			$map_url .= $localized_strings['comdef_search_results_strings']['basic_html'];
			}
		
		$map_url = "<div class=\"c_comdef_search_results_single_map_link_div\">$location_text<span class=\"no_print\"> (<a rel=\"external\" href=\"$map_url\" title=\"".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['map'] )."\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['map_alt'] )."</a>)</span></div>";
		
		$ret .= "<div class=\"c_comdef_search_results_single_data_div\">";
		$ret .= $map_url;
		$ret .= "<div class=\"clear_both\"></div><div class=\"embedded_map_div\" id=\"embedded_map_id_div\">";
		if ( !isset ( $in_http_vars['supports_ajax'] ) || ($in_http_vars['supports_ajax'] != 'yes') )
			{
			$map_uri=
			str_replace ( "##LONG##", htmlspecialchars ( $long_lat['longitude'] ), str_replace ( "##LAT##", htmlspecialchars ( $long_lat['latitude'] ), str_replace ( "##KEY##", $gkey, str_replace ( "##WIDTH##", $static_map_size['width'], str_replace ( "##HEIGHT##", $static_map_size['height'], $localized_strings['comdef_search_results_strings']['StaticMapsURL'] ) ) ) ) );
			$ret .= "<img class=\"c_comdef_search_results_single_static_map_img\" alt=\"".c_comdef_htmlspecialchars($localized_strings['comdef_search_results_strings']['Value_Prompts']['map_alt'])."\" src=\"$map_uri\" />";
			}
		else
			{
			$ret .= '<div id="main_map_id_div" class="main_map_div"></div>';
			}
		$ret .= "</div>";
		$ret .= "<div class=\"c_comdef_search_results_single_gps_div\">";
		$ret .= '<a class="c_comdef_search_results_poi_a" href="';
		$ret .= $location_of_poi.'?lat='.floatval ( $meeting_obj->GetMeetingDataValue('latitude') );
		$ret .= '&amp;lng='.floatval ( $meeting_obj->GetMeetingDataValue('longitude') );
		
		$ret .= '&amp;name=';
		
		if ( $meeting_obj->GetMeetingDataValue('meeting_name') )
			{
			$ret .= urlencode ( $meeting_obj->GetMeetingDataValue('meeting_name') );
			}
		else
			{
			$ret .= urlencode ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['generic'] );
			}
	
		if ( $location_text )
			{
			$ret .= '&amp;desc='.urlencode ( urldecode ( htmlspecialchars_decode ( $location_text ) ) );
			}
		
		$ret .=  '" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['POI_Link_Title'] ).'"><span style="display:none">GPS Download</span></a>';
		
		$ret .= "</div>";
		$ret .= "<div class=\"c_comdef_search_results_single_lang_div\">";
		$ret .= "<span class=\"value_prompt\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['lang_enum'] ).":</span> ";
		$ret .= "<span class=\"value_value\">$lang</span>";
		$ret .= "</div>";
		$ret .= "<div class=\"c_comdef_search_results_single_service_body_div\">";
		$ret .= "<span class=\"value_prompt\">$service_body_type".$localized_strings['prompt_delimiter']."</span> ";
		$ret .= "<span class=\"value_value\">";
		
		if ( $service_body_uri )
			{
			$ret .= '<a href="'.c_comdef_htmlspecialchars ( $service_body_uri ).'">';
			}
		
		$ret .= $service_body_name;
		
		if ( $service_body_uri )
			{
			$ret .= '</a>';
			}
		
		$ret .= "</span>";
		$ret .= "</div>";
		$ret .= $ret_temp;
		$ret .= '<div class="clear_both"></div>';

		if ( isset ( $localized_strings['allow_contact_form'] ) && $localized_strings['allow_contact_form'] && $meeting_obj->GetContactEmail($localized_strings['recursive_contact_form']) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
			{
			$ret .= '<div class="contact_us_line no_print"><a href="javascript:ContactUsLink('.$meeting_obj->GetID().',\''.c_comdef_htmlspecialchars($single_meeting_for_contact).'\')" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Contact_Form']['contact_form_link_title'] ).'">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Contact_Form']['contact_form_link_title'] ).'</a></div>';
			}
		
		if ( isset ( $formats ) && $formats )
			{
			$ret .= $formats;
			}
		$ret .= "</div>";
		$ret .= "</div>";
		}
	else
		{
		$ret .= "<h1 class=\"error_report\">".c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['no_meeting'] )."</h1>";
		}
	
	$ret .= "<div class=\"clear_both\"></div>";
	
	if ( ($meeting_obj instanceof c_comdef_meeting) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close'] ) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') && $meeting_obj->UserCanObserve() )
			{
			$ret .= "<div class=\"c_comdef_search_results_edit_div no_print";
			if ( isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close'] )
				{
				$ret .= " c_comdef_search_results_edit_div_noclose";
				}
			$ret .= "\">";
			$ret .= '<a href="javascript:EditMeetingLink(\''.intval ( $meeting_obj->GetID() ).'\')" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['edit_meeting'] ).$meeting_obj->GetID().'">';
			$ret .= c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['edit_indicator'] )."</a>";
			$ret .= "</div>";
			}
		}
	
	if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close'] ) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$ret .= '<div class="close_div"><a href="javascript:HideMeetingDetails()" title="'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['close_title'] ).'">'.c_comdef_htmlspecialchars ( $localized_strings['comdef_search_results_strings']['Value_Prompts']['close_text']  ).'</a>';
		}
	
	$ret .= "</div>";
	
	// The contact us form is only made available if AJAX is supported.
	if ( isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$ret2 = '<div id="bmlt_contact_us_form_div" class="bmlt_contact_us_form_div';
		
		if ( isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close'] )
			{
			$ret2 .= ' bmlt_contact_us_form_div_single';
			}
		
		$ret2 .= '" style="display:none"></div>';
		$ret = $ret2.$ret;
		}
	if ( !(isset ( $in_http_vars['no_close'] ) && $in_http_vars['no_close']) && isset ( $in_http_vars['supports_ajax'] ) && ($in_http_vars['supports_ajax'] == 'yes') )
		{
		$ret = '##$##'.htmlspecialchars ( $long_lat['latitude'] ).'##$##'.htmlspecialchars ( $long_lat['longitude'] ).'##$##'.$ret;
		}
	else
		{
		$ret = '<div class="c_comdef_search_results_div">'.$ret.'</div>';
		// This is for use by the display mechanism.
		$in_http_vars['out_longitude'] = $long_lat['longitude'];
		$in_http_vars['out_latitude'] = $long_lat['latitude'];
		}
	
	return $ret;
}

/*******************************************************************/
/** \brief Scans a string for viable URIs, and turns them into anchors. Will also do htmlspecialchars. The string needs to be 100% URI, and use one of the protocols we define.
	
	\returns a string, containing the HTML generated by the operation.
*/
function ExtractURIs (	$in_string,	///< A string to be checked.
						$in_title	///< The prefix for the title
					)
{
	$instring2 = strtolower ( trim ( $in_string ) );
	/// These are the protocols we use. They can be overridden in the auto-config.inc.php file by redeclaring the $uri_protocols variable.
	$uri_protocols = array ('http',
							'https',
							'tel',
							'wtai',
							'ftp',
							'wcal'
							);
	$ret = null;
	
	$pmatch = join ( '|', array_map ( 'preg_quote', $uri_protocols ) );
	$matches = 0;
	
	if ( preg_match ( '#^('.$pmatch.')\:\/\/.*?$#', $instring2, $matches ) )
		{
		$instring2 = preg_replace ( '#^('.$pmatch.')\:\/\/(.*?)$#', "$2", $instring2 );
		
		$ret = '<a href="'.$matches[1].'://'.$instring2.'" title="'.c_comdef_htmlspecialchars ( $in_title.$instring2 ).'">'.c_comdef_htmlspecialchars ( $instring2 ).'</a>';
		}
	else
		{
		$ret = c_comdef_htmlspecialchars ( $in_string );
		}
	
	return $ret;
}
?>
